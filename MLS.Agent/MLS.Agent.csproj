<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>netcoreapp3.0</TargetFramework>
    <LangVersion>Latest</LangVersion>
    <AssetTargetFallback>$(AssetTargetFallback);dotnet5.4;portable-net45+win8</AssetTargetFallback>
  </PropertyGroup>

  <PropertyGroup>
    <PackageId>dotnet-try</PackageId>
    <ToolCommandName>dotnet-try</ToolCommandName>
    <IsPackable>true</IsPackable>
    <PackAsTool>true</PackAsTool>
    <Description>
      Try .NET is an interactive documentation generator for .NET Core.
    </Description>
    <NoWarn>$(NoWarn);1998</NoWarn><!-- async method doesn't use 'await' -->
    <NoWarn>$(NoWarn);8002</NoWarn><!-- Clockwise and Markdig aren't strongly signed -->
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="bin\**" />
    <Compile Remove="node_modules\**" />
    <Compile Remove="TestResults\**" />
    <Content Remove="bin\**" />
    <Content Remove="node_modules\**" />
    <Content Remove="TestResults\**" />
    <EmbeddedResource Remove="bin\**" />
    <EmbeddedResource Remove="node_modules\**" />
    <EmbeddedResource Remove="TestResults\**" />
    <None Remove="bin\**" />
    <None Remove="node_modules\**" />
    <None Remove="TestResults\**" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="BadRequestOnInvalidModelFilter" Version="0.1.8580001">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <PackageReference Include="ClientConfiguration" Version="0.1.8580001">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Clockwise" Version="1.0.261-beta" />
    <PackageReference Include="ConfigurationExtensions" Version="0.1.8580001">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <PackageReference Include="DictionaryExtensions" Version="0.1.8580001">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <PackageReference Include="EnvironmentExtensions" Version="0.1.9120003">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <PackageReference Include="LoggerExtensions" Version="0.1.8580001">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Markdig" Version="0.17.0" />
    <PackageReference Include="Microsoft.ApplicationInsights.AspNetCore" Version="2.3.0" />
    <PackageReference Include="Microsoft.AspNetCore.Blazor.Server" Version="3.0.0-preview6.19307.2" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="3.0.0-preview6.19307.2" />
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="2.6.3" PrivateAssets="all" />
    <PackageReference Include="Serilog.Sinks.RollingFileAlternate" Version="2.0.9" />
    <PackageReference Include="Pocket.Disposable" Version="1.0.5">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Pocket.TypeDiscovery" Version="0.4.1">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="PocketLogger" Version="0.3.0">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="PocketLogger.For.ApplicationInsights" Version="0.4.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="PocketLogger.Subscribe" Version="0.6.1">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="system.commandline.experimental" Version="0.3.0-alpha.19317.1" />
    <PackageReference Include="System.Reactive" Version="4.1.5" />
    <PackageReference Include="TaskExtensions" Version="0.1.8580001">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <PackageReference Include="VersionSensor" Version="0.1.8580001">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
  </ItemGroup>
  <ItemGroup>
    <DotNetCliToolReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Tools" Version="1.0.0" />
  </ItemGroup>
  <ImportGroup>
    <Import Project="AssemblyInfo.props" Condition="Exists('AssemblyInfo.props')" />
  </ImportGroup>
  <ItemGroup>
    <ProjectReference Include="..\Microsoft.DotNet.Try.Markdown\Microsoft.DotNet.Try.Markdown.csproj" />
    <ProjectReference Include="..\Microsoft.DotNet.Try.Project\Microsoft.DotNet.Try.Project.csproj" />
    <ProjectReference Include="..\Microsoft.DotNet.Try.Protocol.ClientApi\Microsoft.DotNet.Try.Protocol.ClientApi.csproj" />
    <ProjectReference Include="..\MLS.Agent.Tools\MLS.Agent.Tools.csproj" />
    <ProjectReference Include="..\MLS.Blazor\MLS.Blazor.csproj" />
    <ProjectReference Include="..\Microsoft.DotNet.Try.Jupyter\Microsoft.DotNet.Try.Jupyter.csproj" />
    <ProjectReference Include="..\MLS.Repositories\MLS.Repositories.csproj" />
    <ProjectReference Include="..\WorkspaceServer\WorkspaceServer.csproj" />
  </ItemGroup>
  <ItemGroup>
    <Content Update="appsettings.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="..\MLS.PackageTool\MLS.PackageTool.csproj" />
    <EmbeddedResource Include="..\MLS.PackageTool\Program.cs" />
    <EmbeddedResource Include="$(IntermediateOutputPath)/demo.zip">
      <LogicalName>demo.zip</LogicalName>
    </EmbeddedResource>
  </ItemGroup>

  <Target Name="GatherInputs" Condition="'$(NCrunch)' != '1' And '$(BuildingInsideVisualStudio)' != 'true'">
    <ConvertToAbsolutePath Paths="$(MSBuildThisFileDirectory)">
      <Output TaskParameter="AbsolutePaths" PropertyName="AbsoluteOutputPath"/>
    </ConvertToAbsolutePath>

    <PropertyGroup>
      <webRootDir>$(AbsoluteOutputPath)wwwroot</webRootDir>
      <ClientInputDir>$(MSBuildThisFileDirectory)../Microsoft.DotNet.Try.Client</ClientInputDir>
      <ClientOutputDir>$(webRootDir)/client</ClientOutputDir>
      <ClientOutputFile>$(ClientOutputDir)/bundle.js</ClientOutputFile><!-- TODO: fix this? -->
      <TryDotNetJsInputDir>$(MSBuildThisFileDirectory)../Microsoft.DotNet.Try.js</TryDotNetJsInputDir>
      <TryDotNetJsOutputDir>$(webRootDir)/api</TryDotNetJsOutputDir>
      <TryDotNetJsFile>$(TryDotNetJsOutputDir)/trydotnet.min.js</TryDotNetJsFile>
      <TryDotNetJsMap>$(TryDotNetJsOutputDir)/trydotnet.min.js.map</TryDotNetJsMap>
      <CssInputDir>$(MSBuildThisFileDirectory)../Microsoft.DotNet.Try.Styles</CssInputDir>
      <CssOutputDir>$(webRootDir)/css</CssOutputDir>
      <CssOutputFile>$(CssOutputDir)/trydotnet.css</CssOutputFile>
    </PropertyGroup>
    <ItemGroup>
      <ClientInputFiles Include="$(ClientInputDir)\**" />
      <TryDotNetJsInput Include="$(TryDotNetJsInputDir)\**" />
      <CssInputFiles Include="$(CssInputDir)\sass\**" />
    </ItemGroup>
  </Target>

  <Target Name="BuildCss" Inputs="@$(CssInputFiles)" DependsOnTargets="GatherInputs" Outputs="$(CssOutputFile)" BeforeTargets="BeforeBuild" Condition="'$(NCrunch)' != '1' And '$(BuildingInsideVisualStudio)' != 'true'">

    <PropertyGroup>
      <_TryDotNetCssExists Condition="Exists('$(CssOutputFile)')">true</_TryDotNetCssExists>
    </PropertyGroup>

    <Exec Command="npm rebuild node-sass" WorkingDirectory="$(CssInputDir)" />
    <Exec Command="npm ci" WorkingDirectory="$(CssInputDir)" />
    <Exec Command="npm run ciCreateDir -- $(CssOutputDir)" WorkingDirectory="$(CssInputDir)" />
    <Exec Command="npm run release -- $(CssOutputFile)" WorkingDirectory="$(CssInputDir)" />

    <ItemGroup>
      <FileWrites Include="$(CssOutputFile)" />

      <!-- if the file already existed then it'll already be in the @(Content) item group -->
      <Content Include="$(CssOutputFile)" Condition="'$(_TryDotNetCssExists)' != 'true'" />
    </ItemGroup>
  </Target>

  <Target Name="BuildTryDotNetJs" Inputs="@(TryDotNetJsInput)" Outputs="$(TryDotNetJsFile);$(TryDotNetJsMap)" DependsOnTargets="GatherInputs" BeforeTargets="BeforeBuild" Condition="'$(NCrunch)' != '1' And '$(BuildingInsideVisualStudio)' != 'true'">
    <PropertyGroup>
      <_TryDotNetMinJsExists Condition="Exists('$(TryDotNetJsFile)')">true</_TryDotNetMinJsExists>
    </PropertyGroup>

    <Exec Command="npm ci" WorkingDirectory="$(TryDotNetJsInputDir)" />
    <Exec Command="npm run ciCreateDir -- $(TryDotNetJsOutputDir)" WorkingDirectory="$(TryDotNetJsInputDir)" />
    <Exec Command="npm run build" WorkingDirectory="$(TryDotNetJsInputDir)" />
    <Exec Command="npm run ciMinify -- --output $(TryDotNetJsFile)" WorkingDirectory="$(TryDotNetJsInputDir)" />

    <ItemGroup>
      <FileWrites Include="$(TryDotNetJsFile);$(TryDotNetJsMap)" />

      <!-- if the file already existed then it'll already be in the @(Content) item group -->
      <Content Include="$(TryDotNetJsFile);$(TryDotNetJsMap)" Condition="'$(_TryDotNetMinJsExists)' != 'true'" />
    </ItemGroup>
  </Target>
  
  <Target Name="BuildClient" Inputs="@(ClientInputFiles)" Outputs="$(ClientOutputFile)" DependsOnTargets="GatherInputs" BeforeTargets="BeforeBuild" Condition="'$(NCrunch)' != '1' And '$(BuildingInsideVisualStudio)' != 'true'">

    <PropertyGroup>
      <_TryDotNetClientExists Condition="Exists('$(ClientOutputFile)')">true</_TryDotNetClientExists>
    </PropertyGroup>

    <Exec Command="npm ci" WorkingDirectory="$(ClientInputDir)" />
    <Exec Command="npm run ciCreateDir -- $(ClientOutputDir)" WorkingDirectory="$(ClientInputDir)" />
    <Exec Command="npm run buildCi -- --output-path $(ClientOutputDir)" WorkingDirectory="$(ClientInputDir)" />

    <ItemGroup>
      <FileWrites Include="$(ClientOutputDir)\**" />

      <!-- if the file already existed then it'll already be in the @(Content) item group -->
      <Content Include="$(ClientOutputDir)\**" Condition="'$(_TryDotNetClientExists)' != 'true'" />
    </ItemGroup>
  </Target>

  <Target Name="CopyDemoFiles">
    <ItemGroup>
      <DemoFiles Include="$(MSBuildProjectDirectory)/../docs/GettingStarted/**/*.cs;$(MSBuildProjectDirectory)/../docs/GettingStarted/**/*.md;$(MSBuildProjectDirectory)/../docs/GettingStarted/**/*.csproj;$(MSBuildProjectDirectory)/../docs/GettingStarted/**/*.config" Exclude="**/bin/**; **/obj/**" SkipUnchangedFiles="true" />
    </ItemGroup>

    <Copy SourceFiles="@(DemoFiles)" DestinationFolder="$(IntermediateOutputPath)demo\%(RecursiveDir)" />
  </Target>

  <Target Name="ZipDemo" BeforeTargets="PrepareForBuild" DependsOnTargets="CopyDemoFiles">
    <ZipDirectory SourceDirectory="$(IntermediateOutputPath)demo" DestinationFile="$(IntermediateOutputPath)\demo.zip" Overwrite="true" />
  </Target>
</Project>
