# CI and PR triggers
trigger:
- master
- feature/*
pr:
- master
- feature/*

variables:
  - name: _TeamName
    value: DotNetTry
  - name: _BuildConfig
    value: Release
  - name: _PublishUsingPipelines
    value: false
  - name: _DotNetArtifactsCategory
    value: .NETCore
  - name: BlazorTemplateVersion
    value: 3.0.0-preview6.19307.2
  - name: DotNetSdkVersion
    value: 3.0.100-preview6-012264
  - name: TryDotNetPackagesPath
    value: $(Build.SourcesDirectory)/artifacts/.trydotnet/packages

jobs:
- template: /eng/common/templates/jobs/jobs.yml
  parameters:
    enableMicrobuild: true
    enablePublishBuildArtifacts: true
    enablePublishTestResults: true
    enablePublishBuildAssets: false
    enablePublishUsingPipelines: $(_PublishUsingPipelines)
    enableTelemetry: true
    helixRepo: dotnet/try
    jobs:
    - job: Windows_NT
      pool:
        ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
          vmImage: windows-2019
        ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          name: NetCoreInternal-Int-Pool
          queue: buildpool.windows.10.amd64.vs2017
      variables:
      # Enable signing for internal, non-PR builds
      - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        - name: _SignType
          value: Real
        - name: _BuildArgs
          value: /p:SignType=$(_SignType)
            /p:DotNetSignType=$(_SignType)
            /p:MicroBuild_SigningEnabled=true
            /p:OverridePackageSource=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
            /p:TeamName=$(_TeamName)
            /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines)
            /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory)
            /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
      # else
      - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
        - name: _SignType
          value: Test
        - name: _BuildArgs
          value: /p:SignType=$(_SignType)
      steps:
      - script: git config --global core.longpaths true
        displayName: Enable `git clean` to handle long paths

      - checkout: self
        clean: true

      - task: NodeTool@0
        displayName: Add NodeJS/npm
        inputs:
          versionSpec: '>=12'

      - task: UseDotNet@2
        displayName: Add dotnet
        inputs:
          packageType: sdk
          version: $(DotNetSdkVersion)
          installationPath: $(Agent.ToolsDirectory)\dotnet

      - script: dotnet new -i Microsoft.AspNetCore.Blazor.Templates::$(BlazorTemplateVersion)
        displayName: Install Blazor templates

      - script: |
          robocopy "eng\resources" "$(Build.SourcesDirectory)\artifacts"
          :: robocopy return codes are terrible; 1 means files were copied
          if "%errorlevel%" == "1" exit /b 0
          exit /b 1
        displayName: Prevent test directory crawling

      - script: eng\CIBuild.cmd
          -configuration $(_BuildConfig)
          -prepareMachine
          -sign
          -test
          $(_BuildArgs)
        displayName: Build / Test
        env:
          TRYDOTNET_PACKAGES_PATH: $(TryDotNetPackagesPath)

      - task: PublishTestResults@2
        displayName: Publish NPM Test Results
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '*.trx'
          searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
        continueOnError: true
        condition: always()

      - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        - task: PublishBuildArtifacts@1
          displayName: Publish packages to artifacts container
          inputs:
            pathToPublish: $(Build.SourcesDirectory)\artifacts\packages\$(_BuildConfig)
            artifactName: packages
            artifactType: container

- template: /eng/common/templates/jobs/jobs.yml
  parameters:
    enableMicrobuild: true
    enablePublishBuildArtifacts: true
    enablePublishTestResults: true
    enablePublishBuildAssets: false
    enablePublishUsingPipelines: $(_PublishUsingPipelines)
    enableTelemetry: true
    helixRepo: dotnet/try
    jobs:
    - job: Linux
      pool:
        vmImage: ubuntu-16.04
      variables:
      # Enable signing for internal, non-PR builds
      - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        - name: _SignType
          value: Test
        - name: _BuildArgs
          value: /p:SignType=$(_SignType)
            /p:DotNetSignType=$(_SignType)
            /p:OverridePackageSource=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
            /p:TeamName=$(_TeamName)
            /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
      # else
      - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
        - name: _SignType
          value: Test
        - name: _BuildArgs
          value: /p:SignType=$(_SignType)
      steps:
      - script: git config --global core.longpaths true
        displayName: Enable `git clean` to handle long paths

      - checkout: self
        clean: true

      - task: NodeTool@0
        displayName: Add NodeJS/npm
        inputs:
          versionSpec: '>=12'

      - task: UseDotNet@2
        displayName: Add dotnet
        inputs:
          packageType: sdk
          version: $(DotNetSdkVersion)
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - script: dotnet new -i Microsoft.AspNetCore.Blazor.Templates::$(BlazorTemplateVersion)
        displayName: Install Blazor templates

      - script: |
          mkdir -p "$(Build.SourcesDirectory)/artifacts"
          cp eng/resources/* "$(Build.SourcesDirectory)/artifacts"
        displayName: Prevent test directory crawling

      - script: ./eng/cibuild.sh
          --configuration $(_BuildConfig)
          --prepareMachine
          --test
        displayName: Build / Test
        env:
          TRYDOTNET_PACKAGES_PATH: $(TryDotNetPackagesPath)

      - task: PublishTestResults@2
        displayName: Publish NPM Test Results
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '*.trx'
          searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
        continueOnError: true
        condition: always()
