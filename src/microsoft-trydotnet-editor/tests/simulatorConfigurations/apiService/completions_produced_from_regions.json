{
  "requests": [
    {
      "commands": [
        {
          "token": "command-token",
          "commandType": "OpenProject",
          "command": {
            "project": {
              "files": [
                {
                  "relativeFilePath": "./Program.cs",
                  "content": "\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var fileInfo = new System.IO.FileInfo(\"test.file\");\n        #region TEST_REGION\n        #endregion\n    }\n}\n"
                }
              ]
            },
            "targetKernelName": null,
            "originUri": null,
            "destinationUri": null
          },
          "routingSlip": []
        }
      ],
      "events": [
        {
          "event": {
            "projectItems": [
              {
                "relativeFilePath": "./Program.cs",
                "regionNames": [
                  "TEST_REGION"
                ],
                "regionsContent": {
                  "TEST_REGION": ""
                }
              }
            ]
          },
          "eventType": "ProjectOpened",
          "command": {
            "token": "command-token",
            "commandType": "OpenProject",
            "command": {
              "project": {
                "files": [
                  {
                    "relativeFilePath": "./Program.cs",
                    "content": "\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var fileInfo = new System.IO.FileInfo(\"test.file\");\n        #region TEST_REGION\n        #endregion\n    }\n}\n"
                  }
                ]
              },
              "targetKernelName": "csharp.console",
              "originUri": null,
              "destinationUri": null
            },
            "routingSlip": [
              "kernel://local/csharp.console?tag=arrived",
              "kernel://local/csharp.console"
            ]
          },
          "routingSlip": [
            "kernel://local/csharp.console"
          ]
        },
        {
          "event": {
            "executionOrder": 0
          },
          "eventType": "CommandSucceeded",
          "command": {
            "token": "command-token",
            "commandType": "OpenProject",
            "command": {
              "project": {
                "files": [
                  {
                    "relativeFilePath": "./Program.cs",
                    "content": "\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var fileInfo = new System.IO.FileInfo(\"test.file\");\n        #region TEST_REGION\n        #endregion\n    }\n}\n"
                  }
                ]
              },
              "targetKernelName": "csharp.console",
              "originUri": null,
              "destinationUri": null
            },
            "routingSlip": [
              "kernel://local/csharp.console?tag=arrived",
              "kernel://local/csharp.console"
            ]
          },
          "routingSlip": [
            "kernel://local/csharp.console"
          ]
        }
      ]
    },
    {
      "commands": [
        {
          "token": "command-token",
          "commandType": "OpenProject",
          "command": {
            "project": {
              "files": [
                {
                  "relativeFilePath": "./Program.cs",
                  "content": "\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var fileInfo = new System.IO.FileInfo(\"test.file\");\n        #region TEST_REGION\n        #endregion\n    }\n}\n"
                }
              ]
            },
            "targetKernelName": null,
            "originUri": null,
            "destinationUri": null
          },
          "routingSlip": []
        },
        {
          "token": "command-token",
          "commandType": "OpenDocument",
          "command": {
            "relativeFilePath": "./Program.cs",
            "regionName": "TEST_REGION",
            "targetKernelName": null,
            "originUri": null,
            "destinationUri": null
          },
          "routingSlip": []
        }
      ],
      "events": [
        {
          "event": {
            "projectItems": [
              {
                "relativeFilePath": "./Program.cs",
                "regionNames": [
                  "TEST_REGION"
                ],
                "regionsContent": {
                  "TEST_REGION": ""
                }
              }
            ]
          },
          "eventType": "ProjectOpened",
          "command": {
            "token": "command-token",
            "commandType": "OpenProject",
            "command": {
              "project": {
                "files": [
                  {
                    "relativeFilePath": "./Program.cs",
                    "content": "\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var fileInfo = new System.IO.FileInfo(\"test.file\");\n        #region TEST_REGION\n        #endregion\n    }\n}\n"
                  }
                ]
              },
              "targetKernelName": "csharp.console",
              "originUri": null,
              "destinationUri": null
            },
            "routingSlip": [
              "kernel://local/csharp.console?tag=arrived",
              "kernel://local/csharp.console"
            ]
          },
          "routingSlip": [
            "kernel://local/csharp.console"
          ]
        },
        {
          "event": {
            "executionOrder": 0
          },
          "eventType": "CommandSucceeded",
          "command": {
            "token": "command-token",
            "commandType": "OpenProject",
            "command": {
              "project": {
                "files": [
                  {
                    "relativeFilePath": "./Program.cs",
                    "content": "\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var fileInfo = new System.IO.FileInfo(\"test.file\");\n        #region TEST_REGION\n        #endregion\n    }\n}\n"
                  }
                ]
              },
              "targetKernelName": "csharp.console",
              "originUri": null,
              "destinationUri": null
            },
            "routingSlip": [
              "kernel://local/csharp.console?tag=arrived",
              "kernel://local/csharp.console"
            ]
          },
          "routingSlip": [
            "kernel://local/csharp.console"
          ]
        },
        {
          "event": {
            "relativeFilePath": "./Program.cs",
            "regionName": "TEST_REGION",
            "content": ""
          },
          "eventType": "DocumentOpened",
          "command": {
            "token": "command-token",
            "commandType": "OpenDocument",
            "command": {
              "relativeFilePath": "./Program.cs",
              "regionName": "TEST_REGION",
              "targetKernelName": "csharp.console",
              "originUri": null,
              "destinationUri": null
            },
            "routingSlip": [
              "kernel://local/csharp.console?tag=arrived",
              "kernel://local/csharp.console"
            ]
          },
          "routingSlip": [
            "kernel://local/csharp.console"
          ]
        },
        {
          "event": {
            "executionOrder": 0
          },
          "eventType": "CommandSucceeded",
          "command": {
            "token": "command-token",
            "commandType": "OpenDocument",
            "command": {
              "relativeFilePath": "./Program.cs",
              "regionName": "TEST_REGION",
              "targetKernelName": "csharp.console",
              "originUri": null,
              "destinationUri": null
            },
            "routingSlip": [
              "kernel://local/csharp.console?tag=arrived",
              "kernel://local/csharp.console"
            ]
          },
          "routingSlip": [
            "kernel://local/csharp.console"
          ]
        }
      ]
    },
    {
      "commands": [
        {
          "token": "command-token",
          "commandType": "OpenProject",
          "command": {
            "project": {
              "files": [
                {
                  "relativeFilePath": "./Program.cs",
                  "content": "\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var fileInfo = new System.IO.FileInfo(\"test.file\");\n        #region TEST_REGION\n        #endregion\n    }\n}\n"
                }
              ]
            },
            "targetKernelName": null,
            "originUri": null,
            "destinationUri": null
          },
          "routingSlip": []
        },
        {
          "token": "command-token",
          "commandType": "OpenDocument",
          "command": {
            "relativeFilePath": "./Program.cs",
            "regionName": "TEST_REGION",
            "targetKernelName": null,
            "originUri": null,
            "destinationUri": null
          },
          "routingSlip": []
        },
        {
          "token": "command-token",
          "commandType": "RequestCompletions",
          "command": {
            "code": "fileInfo.",
            "linePosition": {
              "line": 0,
              "character": 9
            },
            "targetKernelName": null,
            "originUri": null,
            "destinationUri": null
          },
          "routingSlip": []
        }
      ],
      "events": [
        {
          "event": {
            "projectItems": [
              {
                "relativeFilePath": "./Program.cs",
                "regionNames": [
                  "TEST_REGION"
                ],
                "regionsContent": {
                  "TEST_REGION": ""
                }
              }
            ]
          },
          "eventType": "ProjectOpened",
          "command": {
            "token": "command-token",
            "commandType": "OpenProject",
            "command": {
              "project": {
                "files": [
                  {
                    "relativeFilePath": "./Program.cs",
                    "content": "\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var fileInfo = new System.IO.FileInfo(\"test.file\");\n        #region TEST_REGION\n        #endregion\n    }\n}\n"
                  }
                ]
              },
              "targetKernelName": "csharp.console",
              "originUri": null,
              "destinationUri": null
            },
            "routingSlip": [
              "kernel://local/csharp.console?tag=arrived",
              "kernel://local/csharp.console"
            ]
          },
          "routingSlip": [
            "kernel://local/csharp.console"
          ]
        },
        {
          "event": {
            "executionOrder": 0
          },
          "eventType": "CommandSucceeded",
          "command": {
            "token": "command-token",
            "commandType": "OpenProject",
            "command": {
              "project": {
                "files": [
                  {
                    "relativeFilePath": "./Program.cs",
                    "content": "\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var fileInfo = new System.IO.FileInfo(\"test.file\");\n        #region TEST_REGION\n        #endregion\n    }\n}\n"
                  }
                ]
              },
              "targetKernelName": "csharp.console",
              "originUri": null,
              "destinationUri": null
            },
            "routingSlip": [
              "kernel://local/csharp.console?tag=arrived",
              "kernel://local/csharp.console"
            ]
          },
          "routingSlip": [
            "kernel://local/csharp.console"
          ]
        },
        {
          "event": {
            "relativeFilePath": "./Program.cs",
            "regionName": "TEST_REGION",
            "content": ""
          },
          "eventType": "DocumentOpened",
          "command": {
            "token": "command-token",
            "commandType": "OpenDocument",
            "command": {
              "relativeFilePath": "./Program.cs",
              "regionName": "TEST_REGION",
              "targetKernelName": "csharp.console",
              "originUri": null,
              "destinationUri": null
            },
            "routingSlip": [
              "kernel://local/csharp.console?tag=arrived",
              "kernel://local/csharp.console"
            ]
          },
          "routingSlip": [
            "kernel://local/csharp.console"
          ]
        },
        {
          "event": {
            "executionOrder": 0
          },
          "eventType": "CommandSucceeded",
          "command": {
            "token": "command-token",
            "commandType": "OpenDocument",
            "command": {
              "relativeFilePath": "./Program.cs",
              "regionName": "TEST_REGION",
              "targetKernelName": "csharp.console",
              "originUri": null,
              "destinationUri": null
            },
            "routingSlip": [
              "kernel://local/csharp.console?tag=arrived",
              "kernel://local/csharp.console"
            ]
          },
          "routingSlip": [
            "kernel://local/csharp.console"
          ]
        },
        {
          "event": {
            "linePositionSpan": null,
            "completions": [
              {
                "displayText": "AppendText",
                "kind": "Method",
                "filterText": "AppendText",
                "sortText": "AppendText",
                "insertText": "AppendText",
                "insertTextFormat": null,
                "documentation": "Creates a System.IO.StreamWriter  that appends text to the file represented by this instance of the System.IO.FileInfo ."
              },
              {
                "displayText": "Attributes",
                "kind": "Property",
                "filterText": "Attributes",
                "sortText": "Attributes",
                "insertText": "Attributes",
                "insertTextFormat": null,
                "documentation": "Gets or sets the attributes for the current file or directory."
              },
              {
                "displayText": "CopyTo",
                "kind": "Method",
                "filterText": "CopyTo",
                "sortText": "CopyTo",
                "insertText": "CopyTo",
                "insertTextFormat": null,
                "documentation": "Copies an existing file to a new file, disallowing the overwriting of an existing file."
              },
              {
                "displayText": "Create",
                "kind": "Method",
                "filterText": "Create",
                "sortText": "Create",
                "insertText": "Create",
                "insertTextFormat": null,
                "documentation": "Creates a file."
              },
              {
                "displayText": "CreateAsSymbolicLink",
                "kind": "Method",
                "filterText": "CreateAsSymbolicLink",
                "sortText": "CreateAsSymbolicLink",
                "insertText": "CreateAsSymbolicLink",
                "insertTextFormat": null,
                "documentation": "Creates a symbolic link located in System.IO.FileSystemInfo.FullName  that points to the specified pathToTarget ."
              },
              {
                "displayText": "CreateText",
                "kind": "Method",
                "filterText": "CreateText",
                "sortText": "CreateText",
                "insertText": "CreateText",
                "insertTextFormat": null,
                "documentation": "Creates a System.IO.StreamWriter  that writes a new text file."
              },
              {
                "displayText": "CreationTime",
                "kind": "Property",
                "filterText": "CreationTime",
                "sortText": "CreationTime",
                "insertText": "CreationTime",
                "insertTextFormat": null,
                "documentation": "Gets or sets the creation time of the current file or directory."
              },
              {
                "displayText": "CreationTimeUtc",
                "kind": "Property",
                "filterText": "CreationTimeUtc",
                "sortText": "CreationTimeUtc",
                "insertText": "CreationTimeUtc",
                "insertTextFormat": null,
                "documentation": "Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory."
              },
              {
                "displayText": "Decrypt",
                "kind": "Method",
                "filterText": "Decrypt",
                "sortText": "Decrypt",
                "insertText": "Decrypt",
                "insertTextFormat": null,
                "documentation": "Decrypts a file that was encrypted by the current account using the System.IO.FileInfo.Encrypt  method."
              },
              {
                "displayText": "Delete",
                "kind": "Method",
                "filterText": "Delete",
                "sortText": "Delete",
                "insertText": "Delete",
                "insertTextFormat": null,
                "documentation": "Permanently deletes a file."
              },
              {
                "displayText": "Directory",
                "kind": "Property",
                "filterText": "Directory",
                "sortText": "Directory",
                "insertText": "Directory",
                "insertTextFormat": null,
                "documentation": "Gets an instance of the parent directory."
              },
              {
                "displayText": "DirectoryName",
                "kind": "Property",
                "filterText": "DirectoryName",
                "sortText": "DirectoryName",
                "insertText": "DirectoryName",
                "insertTextFormat": null,
                "documentation": "Gets a string representing the directory's full path."
              },
              {
                "displayText": "Encrypt",
                "kind": "Method",
                "filterText": "Encrypt",
                "sortText": "Encrypt",
                "insertText": "Encrypt",
                "insertTextFormat": null,
                "documentation": "Encrypts a file so that only the account used to encrypt the file can decrypt it."
              },
              {
                "displayText": "Equals",
                "kind": "Method",
                "filterText": "Equals",
                "sortText": "Equals",
                "insertText": "Equals",
                "insertTextFormat": null,
                "documentation": "Determines whether the specified object is equal to the current object."
              },
              {
                "displayText": "Exists",
                "kind": "Property",
                "filterText": "Exists",
                "sortText": "Exists",
                "insertText": "Exists",
                "insertTextFormat": null,
                "documentation": "Gets a value indicating whether a file exists."
              },
              {
                "displayText": "Extension",
                "kind": "Property",
                "filterText": "Extension",
                "sortText": "Extension",
                "insertText": "Extension",
                "insertTextFormat": null,
                "documentation": "Gets the extension part of the file name, including the leading dot . even if it is the entire file name, or an empty string if no extension is present."
              },
              {
                "displayText": "FullName",
                "kind": "Property",
                "filterText": "FullName",
                "sortText": "FullName",
                "insertText": "FullName",
                "insertTextFormat": null,
                "documentation": "Gets the full path of the directory or file."
              },
              {
                "displayText": "GetHashCode",
                "kind": "Method",
                "filterText": "GetHashCode",
                "sortText": "GetHashCode",
                "insertText": "GetHashCode",
                "insertTextFormat": null,
                "documentation": "Serves as the default hash function."
              },
              {
                "displayText": "GetLifetimeService",
                "kind": "Method",
                "filterText": "GetLifetimeService",
                "sortText": "GetLifetimeService",
                "insertText": "GetLifetimeService",
                "insertTextFormat": null,
                "documentation": "Retrieves the current lifetime service object that controls the lifetime policy for this instance."
              },
              {
                "displayText": "GetType",
                "kind": "Method",
                "filterText": "GetType",
                "sortText": "GetType",
                "insertText": "GetType",
                "insertTextFormat": null,
                "documentation": "Gets the System.Type  of the current instance."
              },
              {
                "displayText": "InitializeLifetimeService",
                "kind": "Method",
                "filterText": "InitializeLifetimeService",
                "sortText": "InitializeLifetimeService",
                "insertText": "InitializeLifetimeService",
                "insertTextFormat": null,
                "documentation": "Obtains a lifetime service object to control the lifetime policy for this instance."
              },
              {
                "displayText": "IsReadOnly",
                "kind": "Property",
                "filterText": "IsReadOnly",
                "sortText": "IsReadOnly",
                "insertText": "IsReadOnly",
                "insertTextFormat": null,
                "documentation": "Gets or sets a value that determines if the current file is read only."
              },
              {
                "displayText": "LastAccessTime",
                "kind": "Property",
                "filterText": "LastAccessTime",
                "sortText": "LastAccessTime",
                "insertText": "LastAccessTime",
                "insertTextFormat": null,
                "documentation": "Gets or sets the time the current file or directory was last accessed."
              },
              {
                "displayText": "LastAccessTimeUtc",
                "kind": "Property",
                "filterText": "LastAccessTimeUtc",
                "sortText": "LastAccessTimeUtc",
                "insertText": "LastAccessTimeUtc",
                "insertTextFormat": null,
                "documentation": "Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed."
              },
              {
                "displayText": "LastWriteTime",
                "kind": "Property",
                "filterText": "LastWriteTime",
                "sortText": "LastWriteTime",
                "insertText": "LastWriteTime",
                "insertTextFormat": null,
                "documentation": "Gets or sets the time when the current file or directory was last written to."
              },
              {
                "displayText": "LastWriteTimeUtc",
                "kind": "Property",
                "filterText": "LastWriteTimeUtc",
                "sortText": "LastWriteTimeUtc",
                "insertText": "LastWriteTimeUtc",
                "insertTextFormat": null,
                "documentation": "Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to."
              },
              {
                "displayText": "Length",
                "kind": "Property",
                "filterText": "Length",
                "sortText": "Length",
                "insertText": "Length",
                "insertTextFormat": null,
                "documentation": "Gets the size, in bytes, of the current file."
              },
              {
                "displayText": "LinkTarget",
                "kind": "Property",
                "filterText": "LinkTarget",
                "sortText": "LinkTarget",
                "insertText": "LinkTarget",
                "insertTextFormat": null,
                "documentation": "Gets the target path of the link located in System.IO.FileSystemInfo.FullName , or null if this System.IO.FileSystemInfo  instance doesn't represent a link."
              },
              {
                "displayText": "MoveTo",
                "kind": "Method",
                "filterText": "MoveTo",
                "sortText": "MoveTo",
                "insertText": "MoveTo",
                "insertTextFormat": null,
                "documentation": "Moves a specified file to a new location, providing the option to specify a new file name."
              },
              {
                "displayText": "Name",
                "kind": "Property",
                "filterText": "Name",
                "sortText": "Name",
                "insertText": "Name",
                "insertTextFormat": null,
                "documentation": "Gets the name of the file."
              },
              {
                "displayText": "Open",
                "kind": "Method",
                "filterText": "Open",
                "sortText": "Open",
                "insertText": "Open",
                "insertTextFormat": null,
                "documentation": "Opens a file in the specified mode."
              },
              {
                "displayText": "OpenRead",
                "kind": "Method",
                "filterText": "OpenRead",
                "sortText": "OpenRead",
                "insertText": "OpenRead",
                "insertTextFormat": null,
                "documentation": "Creates a read-only System.IO.FileStream ."
              },
              {
                "displayText": "OpenText",
                "kind": "Method",
                "filterText": "OpenText",
                "sortText": "OpenText",
                "insertText": "OpenText",
                "insertTextFormat": null,
                "documentation": "Creates a System.IO.StreamReader  with UTF8 encoding that reads from an existing text file."
              },
              {
                "displayText": "OpenWrite",
                "kind": "Method",
                "filterText": "OpenWrite",
                "sortText": "OpenWrite",
                "insertText": "OpenWrite",
                "insertTextFormat": null,
                "documentation": "Creates a write-only System.IO.FileStream ."
              },
              {
                "displayText": "Refresh",
                "kind": "Method",
                "filterText": "Refresh",
                "sortText": "Refresh",
                "insertText": "Refresh",
                "insertTextFormat": null,
                "documentation": "Refreshes the state of the object."
              },
              {
                "displayText": "Replace",
                "kind": "Method",
                "filterText": "Replace",
                "sortText": "Replace",
                "insertText": "Replace",
                "insertTextFormat": null,
                "documentation": "Replaces the contents of a specified file with the file described by the current System.IO.FileInfo  object, deleting the original file, and creating a backup of the replaced file."
              },
              {
                "displayText": "ResolveLinkTarget",
                "kind": "Method",
                "filterText": "ResolveLinkTarget",
                "sortText": "ResolveLinkTarget",
                "insertText": "ResolveLinkTarget",
                "insertTextFormat": null,
                "documentation": "Gets the target of the specified link."
              },
              {
                "displayText": "ToString",
                "kind": "Method",
                "filterText": "ToString",
                "sortText": "ToString",
                "insertText": "ToString",
                "insertTextFormat": null,
                "documentation": "Returns the original path. Use the System.IO.FileSystemInfo.FullName  or System.IO.FileSystemInfo.Name  properties for the full path or file/directory name."
              },
              {
                "displayText": "UnixFileMode",
                "kind": "Property",
                "filterText": "UnixFileMode",
                "sortText": "UnixFileMode",
                "insertText": "UnixFileMode",
                "insertTextFormat": null,
                "documentation": "Gets or sets the Unix file mode for the current file or directory."
              }
            ]
          },
          "eventType": "CompletionsProduced",
          "command": {
            "token": "command-token",
            "commandType": "RequestCompletions",
            "command": {
              "code": "fileInfo.",
              "linePosition": {
                "line": 0,
                "character": 9
              },
              "targetKernelName": "csharp.console",
              "originUri": null,
              "destinationUri": null
            },
            "routingSlip": [
              "kernel://local/csharp.console?tag=arrived",
              "kernel://local/csharp.console"
            ]
          },
          "routingSlip": [
            "kernel://local/csharp.console"
          ]
        },
        {
          "event": {
            "executionOrder": 0
          },
          "eventType": "CommandSucceeded",
          "command": {
            "token": "command-token",
            "commandType": "RequestCompletions",
            "command": {
              "code": "fileInfo.",
              "linePosition": {
                "line": 0,
                "character": 9
              },
              "targetKernelName": null,
              "originUri": null,
              "destinationUri": null
            },
            "routingSlip": []
          },
          "routingSlip": [
            "kernel://local/csharp.console"
          ]
        }
      ]
    }
  ]
}